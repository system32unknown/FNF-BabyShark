name: Build Release
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        compile: [windows]
        build: [release]

        include:
          - compile: windows
            os: windows-latest
            folder: windows

    name: ${{ matrix.compile }}-${{ matrix.build }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5

      - name: Restore action cache
        uses: actions/cache@main
        with:
          key: cache-${{ matrix.compile }}-${{ matrix.build }}
          path: |
            export/${{ matrix.build }}/${{ matrix.folder }}/haxe/
            export/${{ matrix.build }}/${{ matrix.folder }}/obj/
            .haxelib/

      - name: Setup Haxelib
        run: |
          haxelib setup .haxelib/
        
      - name: Install Hxcpp
        run: |
          git clone https://github.com/HaxeFoundation/hxcpp.git --depth=1;
          haxelib dev hxcpp hxcpp
          cd hxcpp/tools/hxcpp
          haxe compile.hxml
          cd ../build
          haxe compile.hxml
          cd ../../project
          neko build.n

      - name: Install haxelibs
        run: haxe -cp update -D analyzer-optimize -main Update --interp

      - name: Compile
        run: haxelib run openfl build ${{ matrix.compile }} -${{ matrix.build }}

      - name: Uploading artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.compile }}-${{ matrix.build }}
          path: export/${{ matrix.build }}/${{ matrix.folder }}/bin
          if-no-files-found: error

      - name: Uploading artifact (executable windows)
        uses: actions/upload-artifact@main
        with:
          name: executableOnly-${{ matrix.compile }}-${{ matrix.build }}
          path: export/${{ matrix.build }}/${{ matrix.folder }}/bin/AlterEngine.exe

      - name: Clearing already existing cache
        uses: actions/github-script@main
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-${{ matrix.compile }}-${{ matrix.build }}") {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
              }
            }

      - name: Uploading new cache
        uses: actions/cache@main
        with:
          key: cache-${{ matrix.compile }}-${{ matrix.build }}
          path: |
            export/${{ matrix.build }}/${{ matrix.folder }}/haxe/
            export/${{ matrix.build }}/${{ matrix.folder }}/obj/
            .haxelib/
    
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@master
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          content: "Build Action Completed"