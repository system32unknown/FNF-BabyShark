name: Build Release

# Controls when the action will run.
on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  builds:
    strategy:
      fail-fast: false
      matrix:
        compile: [windows]
        build: [release]
        include:
          - compile: windows
            os: windows-latest
            folder: windows

    name: ${{matrix.compile}}-${{matrix.build}}
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout
      - uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5

      # Not caching the bin folder to prevent asset duplication and stuff like that
      - name: Get last Action build
        uses: actions/cache@main
        with:
          key: cache-${{matrix.compile}}-${{matrix.build}}
          path: |
            export/${{matrix.build}}/${{matrix.folder}}/haxe/
            export/${{matrix.build}}/${{matrix.folder}}/obj/
            .haxelib/
      # Runs a set of commands using the runners shell
      - name: Setup Haxelib
        run: |
          haxelib setup ./haxelib
          haxelib install hxcpp --quiet
          haxelib install hmm --quiet
          haxelib run hmm install

      - name: Install haxelibs
        run: haxe -cp update -D analyzer-optimize -main Update --interp

      - name: Compile
        run: haxelib run openfl build ${{matrix.compile}} -${{matrix.build}} -D officialBuild -64

      - name: Uploading
        uses: actions/upload-artifact@main
        with:
          name: ${{matrix.compile}}-${{matrix.build}}
          path: export/${{matrix.build}}/${{matrix.folder}}/bin
          if-no-files-found: error

      - name: Publish artifact (executable)
        uses: actions/upload-artifact@main
        with:
          name: executableOnly-${{matrix.compile}}-${{ matrix.build}}
          path: export/${{ matrix.build}}/${{ matrix.folder}}/bin/Baby Shark's Funkin.exe

      - name: Clear current Action Cache
        uses: actions/github-script@main
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-windows") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }

      - name: Caching new Action
        uses: actions/cache@main
        with:
          key: cache-${{ matrix.compile }}-${{matrix.build}}
          path: |
            export/${{matrix.build}}/${{matrix.folder}}/haxe/
            export/${{matrix.build}}/${{matrix.folder}}/obj/
            .haxelib/